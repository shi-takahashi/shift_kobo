import 'package:flutter/material.dart';
// import 'package:google_mobile_ads/google_mobile_ads.dart'; // 一時的にコメントアウト
import 'calendar_screen.dart';
import 'staff_list_screen.dart';
import 'settings_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  
  // 一時的にコメントアウト
  // late BannerAd _bannerAd;
  // bool _isBannerAdReady = false;

  final List<Widget> _screens = [
    const CalendarScreen(),
    const StaffListScreen(),
    const SettingsScreen(),
  ];

  final List<String> _titles = [
    'シフト表',
    'スタッフ管理',
    '設定',
  ];

  @override
  void initState() {
    super.initState();
    // _loadBannerAd(); // 一時的にコメントアウト
  }

  // void _loadBannerAd() {
  //   _bannerAd = BannerAd(
  //     adUnitId: 'ca-app-pub-3940256099942544/6300978111',
  //     request: const AdRequest(),
  //     size: AdSize.banner,
  //     listener: BannerAdListener(
  //       onAdLoaded: (_) {
  //         setState(() {
  //           _isBannerAdReady = true;
  //         });
  //       },
  //       onAdFailedToLoad: (ad, err) {
  //         _isBannerAdReady = false;
  //         ad.dispose();
  //       },
  //     ),
  //   );
  //   _bannerAd.load();
  // }

  @override
  void dispose() {
    // _bannerAd.dispose(); // 一時的にコメントアウト
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(_titles[_selectedIndex]),
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline),
            onPressed: () {
              _showHelpDialog();
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: _screens[_selectedIndex],
          ),
          // 広告表示を一時的にコメントアウト
          // if (_isBannerAdReady)
          //   SizedBox(
          //     width: _bannerAd.size.width.toDouble(),
          //     height: _bannerAd.size.height.toDouble(),
          //     child: AdWidget(ad: _bannerAd),
          //   ),
        ],
      ),
      bottomNavigationBar: NavigationBar(
        onDestinationSelected: (int index) {
          setState(() {
            _selectedIndex = index;
          });
        },
        selectedIndex: _selectedIndex,
        destinations: const <Widget>[
          NavigationDestination(
            icon: Icon(Icons.calendar_month),
            label: 'シフト',
          ),
          NavigationDestination(
            icon: Icon(Icons.people),
            label: 'スタッフ',
          ),
          NavigationDestination(
            icon: Icon(Icons.settings),
            label: '設定',
          ),
        ],
      ),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  Widget? _buildFloatingActionButton() {
    if (_selectedIndex == 0) {
      return FloatingActionButton.extended(
        onPressed: () {
          _showAutoGenerateDialog();
        },
        label: const Text('自動作成'),
        icon: const Icon(Icons.auto_fix_high),
      );
    } else if (_selectedIndex == 1) {
      return FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, '/add_staff');
        },
        child: const Icon(Icons.person_add),
      );
    }
    return null;
  }

  void _showAutoGenerateDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('シフト自動作成'),
        content: const Text('今月のシフトを自動で作成しますか？'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('キャンセル'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('シフトを自動作成しました')),
              );
            },
            child: const Text('作成'),
          ),
        ],
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('使い方'),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('1. スタッフ管理でスタッフを登録'),
              SizedBox(height: 8),
              Text('2. カレンダーでシフトを自動作成'),
              SizedBox(height: 8),
              Text('3. 必要に応じて手動で調整'),
              SizedBox(height: 8),
              Text('4. 完成したシフト表を共有'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('閉じる'),
          ),
        ],
      ),
    );
  }
}